package okio;

import java.io.IOException;

class AsyncTimeout$1
  implements Sink
{
  public void close()
  {
    this.this$0.enter();
    try
    {
      this.val$sink.close();
      this.this$0.exit(true);
      return;
    }
    catch (IOException localIOException)
    {
      throw this.this$0.exit(localIOException);
    }
    finally
    {
      this.this$0.exit(false);
    }
    throw localObject;
  }

  public void flush()
  {
    this.this$0.enter();
    try
    {
      this.val$sink.flush();
      this.this$0.exit(true);
      return;
    }
    catch (IOException localIOException)
    {
      throw this.this$0.exit(localIOException);
    }
    finally
    {
      this.this$0.exit(false);
    }
    throw localObject;
  }

  public Timeout timeout()
  {
    return this.this$0;
  }

  public String toString()
  {
    return "AsyncTimeout.sink(" + this.val$sink + ")";
  }

  public void write(Buffer paramBuffer, long paramLong)
  {
    this.this$0.enter();
    try
    {
      this.val$sink.write(paramBuffer, paramLong);
      this.this$0.exit(true);
      return;
    }
    catch (IOException localIOException)
    {
      throw this.this$0.exit(localIOException);
    }
    finally
    {
      this.this$0.exit(false);
    }
    throw localObject;
  }
}

package okio;

import java.io.IOException;

class AsyncTimeout$2
  implements Source
{
  public void close()
  {
    try
    {
      this.val$source.close();
      this.this$0.exit(true);
      return;
    }
    catch (IOException localIOException)
    {
      throw this.this$0.exit(localIOException);
    }
    finally
    {
      this.this$0.exit(false);
    }
    throw localObject;
  }

  public long read(Buffer paramBuffer, long paramLong)
  {
    this.this$0.enter();
    try
    {
      long l = this.val$source.read(paramBuffer, paramLong);
      this.this$0.exit(true);
      return l;
    }
    catch (IOException localIOException)
    {
      throw this.this$0.exit(localIOException);
    }
    finally
    {
      this.this$0.exit(false);
    }
    throw localObject;
  }

  public Timeout timeout()
  {
    return this.this$0;
  }

  public String toString()
  {
    return "AsyncTimeout.source(" + this.val$source + ")";
  }
}

package okio;

final class AsyncTimeout$Watchdog extends Thread
{
  public AsyncTimeout$Watchdog()
  {
    super("Okio Watchdog");
    setDaemon(true);
  }

  public final void run()
  {
    while (true)
      try
      {
        AsyncTimeout localAsyncTimeout = AsyncTimeout.access$000();
        if (localAsyncTimeout == null)
          continue;
        localAsyncTimeout.timedOut();
        continue;
      }
      catch (InterruptedException localInterruptedException)
      {
      }
  }
}

package okio;

import java.io.IOException;
import java.io.InterruptedIOException;

public class AsyncTimeout extends Timeout
{
  private static AsyncTimeout head;
  private boolean inQueue;
  private AsyncTimeout next;
  private long timeoutAt;

  /** @deprecated */
  private static AsyncTimeout awaitTimeout()
  {
    Object localObject1 = null;
    monitorenter;
    try
    {
      AsyncTimeout localAsyncTimeout = head.next;
      if (localAsyncTimeout == null);
      while (true)
      {
        return localObject1;
        if (localAsyncTimeout.remainingNanos(System.nanoTime()) > 0L)
          continue;
        head.next = localAsyncTimeout.next;
        localAsyncTimeout.next = null;
        localObject1 = localAsyncTimeout;
      }
    }
    finally
    {
      monitorexit;
    }
    throw localObject2;
  }

  /** @deprecated */
  private static boolean cancelScheduledTimeout(AsyncTimeout paramAsyncTimeout)
  {
    monitorenter;
    try
    {
      AsyncTimeout localAsyncTimeout = head;
      if (localAsyncTimeout != null)
        if (localAsyncTimeout.next == paramAsyncTimeout)
        {
          localAsyncTimeout.next = paramAsyncTimeout.next;
          paramAsyncTimeout.next = null;
        }
      for (int i = 0; ; i = 1)
      {
        return i;
        localAsyncTimeout = localAsyncTimeout.next;
        break;
      }
    }
    finally
    {
      monitorexit;
    }
    throw localObject;
  }

  private long remainingNanos(long paramLong)
  {
    return this.timeoutAt - paramLong;
  }

  /** @deprecated */
  private static void scheduleTimeout(AsyncTimeout paramAsyncTimeout, long paramLong, boolean paramBoolean)
  {
    monitorenter;
    while (true)
    {
      try
      {
        if (head != null)
          continue;
        head = new AsyncTimeout();
        new AsyncTimeout.Watchdog().start();
        long l1 = System.nanoTime();
        if ((paramLong == 0L) || (!paramBoolean))
          continue;
        paramAsyncTimeout.timeoutAt = (l1 + Math.min(paramLong, paramAsyncTimeout.deadlineNanoTime() - l1));
        long l2 = paramAsyncTimeout.remainingNanos(l1);
        localAsyncTimeout1 = head;
        if ((localAsyncTimeout1.next != null) && (l2 >= localAsyncTimeout1.next.remainingNanos(l1)))
          break label182;
        paramAsyncTimeout.next = localAsyncTimeout1.next;
        localAsyncTimeout1.next = paramAsyncTimeout;
        AsyncTimeout localAsyncTimeout2 = head;
        if (localAsyncTimeout1 == localAsyncTimeout2);
        return;
        if (paramLong != 0L)
        {
          long l3 = l1 + paramLong;
          paramAsyncTimeout.timeoutAt = l3;
          continue;
        }
      }
      finally
      {
        monitorexit;
      }
      if (paramBoolean)
      {
        paramAsyncTimeout.timeoutAt = paramAsyncTimeout.deadlineNanoTime();
        continue;
      }
      throw new AssertionError();
      label182: AsyncTimeout localAsyncTimeout1 = localAsyncTimeout1.next;
    }
  }

  public final void enter()
  {
    if (this.inQueue)
      throw new IllegalStateException("Unbalanced enter/exit");
    long l = timeoutNanos();
    boolean bool = hasDeadline();
    if ((l == 0L) && (!bool));
    while (true)
    {
      return;
      this.inQueue = true;
      scheduleTimeout(this, l, bool);
    }
  }

  final IOException exit(IOException paramIOException)
  {
    if (!exit());
    while (true)
    {
      return paramIOException;
      paramIOException = newTimeoutException(paramIOException);
    }
  }

  final void exit(boolean paramBoolean)
  {
    if ((exit()) && (paramBoolean))
      throw newTimeoutException(null);
  }

  public final boolean exit()
  {
    boolean bool = false;
    if (!this.inQueue);
    while (true)
    {
      return bool;
      this.inQueue = false;
      bool = cancelScheduledTimeout(this);
    }
  }

  public IOException newTimeoutException(IOException paramIOException)
  {
    InterruptedIOException localInterruptedIOException = new InterruptedIOException("timeout");
    if (paramIOException != null)
      localInterruptedIOException.initCause(paramIOException);
    return localInterruptedIOException;
  }

  public final Sink sink(Sink paramSink)
  {
    return new AsyncTimeout.1(this, paramSink);
  }

  public final Source source(Source paramSource)
  {
    return new AsyncTimeout.2(this, paramSource);
  }

  public void timedOut()
  {
  }
}